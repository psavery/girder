from girder.api import access
from girder.api.rest import boundHandler
from girder.api.describe import Description, autoDescribeRoute

from girder.constants import registerAccessFlag

registerAccessFlag(key='cats.feed', name='Feed cats',
                   description='Allows users to feed cats')

@access.public
@autoDescribeRoute(
    Description('Retrieve the cat for a given item.')
    .param('id', 'The item ID', paramType='path')
    .param('cat', 'The cat value.', required=False))

@boundHandler
def myHandler(self, id, params):
    print(params)
    self.requireParams('cat', params)
    print("myHandler() has been called!")
    return {
       'itemId': id,
       'cat': params['cat']
    }

from girder.constants import AccessType
from girder.models.model_base import Model

from girder.plugins.cats.models.cat import Cat
from girder.api.rest import getCurrentUser, getBodyJson

@access.user
@autoDescribeRoute(
    Description('Feed a cat')
    .modelParam('id', description='ID of the cat', model=Cat, level=AccessType.WRITE)
)
def feedCats(cat, params):
    #Cat().requireAccessFlags(item, user=getCurrentUser(), flags='cats.feed')
    print("The cats have been fed!")
    return { 'result' : 'The cats have been fed!!' }

@access.user
@autoDescribeRoute(
    Description('Create a cat')
    .jsonParam('body', 'The body', paramType='body')
)
def createCat(body):
    Cat().setUserAccess(body, getCurrentUser(), AccessType.ADMIN)
    cat = Cat().save(body)
    id = cat["_id"]
    return cat


def load(info):
    print("load() has been called!")
    info['apiRoot'].item.route('GET', (':id', 'cat'), myHandler)
    info['apiRoot'].item.route('POST', ('createCat',), createCat)
    info['apiRoot'].item.route('POST', (':id', 'feedCats'), feedCats)
